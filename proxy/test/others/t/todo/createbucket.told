use t::MYTEST 'no_plan';
no_long_string();
log_level 'debug';
#use Test::Nginx::Socket::Lua 'no_plan'; 

no_root_location();
no_shuffle();
run_tests();
# problem :only one value


__DATA__


=== TEST 1: usr args test,using format=xml 
--- raw_request eval
use POSIX;
use lib '/home/deploy/dobjstor/proxy/test/t';
use MY::access qw(makereq);
use URI::Escape;
my $req1;
my $bodyy = '';
my $len =  length('objcontent' x 100);
my $file = '';
my $size = -s $file;
$size = $size + 1;
my @url1 = ("http://s3.dnion.com:8081/1bkt?format=xml","-H","Host: s3.dnion.com:8081", "-H", "Connection: close", "-X", "GET");
#$req1 = MY::access::makereq(\@url1, \$bodyy, 0,'',\$file);
# CAN $req1 = MY::access::makereq(\@url1,\$bodyy,0,'','');
# can$req1 = MY::access::makereq(\@url1, '', 0,'','');
$req1 = MY::access::makereq(\@url1);
#--- response_body_lik: 400 Bad
--- response_body_like chomp
ListBucketResult
--- error_code: 200
--- timeout: 5000ms
--- abort
#--- ONLY


=== TEST 1: create bucket
--- main_config
error_log logs/error.log info;

--- http_config
    lua_package_path    "/home/deploy/dobjstor/proxy/?.lua;/home/deploy/dobjstor/proxy/thirdparty/?.lua;/home/deploy/dobjstor/proxy/ostore_api/librados/?.lua;/home/deploy/dobjstor/proxy/common/?.lua;;";
    lua_package_cpath    "/home/deploy/dobjstor/proxy/?.so;/home/deploy/dobjstor/proxy/thirdparty/?.so;;";
    lua_shared_dict     cephvars    1M;
    init_by_lua_file "/home/deploy/dobjstor/proxy/radosload.lua";

--- config
    location /t {
        client_max_body_size 10000000k;
        client_body_buffer_size 100000k;
        default_type text/plain;
        content_by_lua_file "/home/deploy/dobjstor/proxy/storageproxy.lua";
    }

--- raw_request eval
use POSIX;
use lib '/home/deploy/dobjstor/proxy/test/t/';
use MY::access qw(req);
use MY::access qw(sign);
#curl para
my @url = ("http://192.168.122.214:7480/bucket777","-H","Host: 192.168.122.214:7481", "-H","Expect:","-H", "Content-Length: 0", "-H", "Content-Type: text/plain", "-X", "PUT");
my ($method, $uriandargs, $signature, $httpDate) = &MY::access::gsign(@url);
my $req1;
$req1 = &MY::access::req($method, $uriandargs, $signature, $httpDate);



#--- response_body_lik: 400 Bad
#--- response_body_like chomp
#ListBucketResult
--- error_code: 200
--- timeout: 5000ms
--- abort

=== TEST 2: listthisbucket
--- main_config
error_log logs/error.log info;

--- http_config
    lua_package_path    "/home/deploy/dobjstor/proxy/?.lua;/home/deploy/dobjstor/proxy/thirdparty/?.lua;/home/deploy/dobjstor/proxy/ostore_api/librados/?.lua;/home/deploy/dobjstor/proxy/common/?.lua;;";
    lua_package_cpath    "/home/deploy/dobjstor/proxy/?.so;/home/deploy/dobjstor/proxy/thirdparty/?.so;;";
    lua_shared_dict     cephvars    1M;
    init_by_lua_file "/home/deploy/dobjstor/proxy/radosload.lua";

--- config
    location /t {
        client_max_body_size 10000000k;
        client_body_buffer_size 100000k;
        default_type text/plain;
        content_by_lua_file "/home/deploy/dobjstor/proxy/storageproxy.lua";
    }

--- raw_request eval
use POSIX;
use lib '/home/deploy/dobjstor/proxy/test/t/';
use MY::access qw(req);
use MY::access qw(sign);
#curl para
my @url = ("http://192.168.122.214:7480/bucket777","-H","Host: 192.168.122.214:7481", "-X", "GET");
my ($method, $uriandargs, $signature, $httpDate) = &MY::access::gsign(@url);
my $req1;
$req1 = &MY::access::req($method, $uriandargs, $signature, $httpDate);



#--- response_body_lik: 400 Bad
#--- response_body_like chomp
--- response_body_like eval
qr/ListBucketResult*bucket777*/
--- error_code: 200
--- timeout: 5000ms
--- abort
