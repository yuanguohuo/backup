--
-- Autogenerated by Thrift
--
-- DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
-- @generated
--

local utils = require "common.utils"

require 'Thrift'
require 'hbase_ttypes'

THBaseServiceClient = __TObject.new(__TClient, {
  __type = 'THBaseServiceClient'
})

function THBaseServiceClient:exists(table, tget)
  self:send_exists(table, tget)
  return self:recv_exists(table, tget)
end

function THBaseServiceClient:send_exists(table, tget)
  self.oprot:writeMessageBegin('exists', TMessageType.CALL, self._seqid)
  local args = exists_args:new{}
  args.table = table
  args.tget = tget
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_exists(table, tget)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = exists_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:get(table, tget)
  self:send_get(table, tget)
  return self:recv_get(table, tget)
end

function THBaseServiceClient:send_get(table, tget)
  self.oprot:writeMessageBegin('get', TMessageType.CALL, self._seqid)
  local args = get_args:new{}
  args.table = table
  args.tget = tget
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_get(table, tget)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = get_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:getMultiple(table, tgets)
  self:send_getMultiple(table, tgets)
  return self:recv_getMultiple(table, tgets)
end

function THBaseServiceClient:send_getMultiple(table, tgets)
  self.oprot:writeMessageBegin('getMultiple', TMessageType.CALL, self._seqid)
  local args = getMultiple_args:new{}
  args.table = table
  args.tgets = tgets
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_getMultiple(table, tgets)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getMultiple_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:put(table, tput)
  self:send_put(table, tput)
  self:recv_put(table, tput)
end

function THBaseServiceClient:send_put(table, tput)
  self.oprot:writeMessageBegin('put', TMessageType.CALL, self._seqid)
  local args = put_args:new{}
  args.table = table
  args.tput = tput
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_put(table, tput)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = put_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:checkAndPut(table, row, family, qualifier, value, tput)
  self:send_checkAndPut(table, row, family, qualifier, value, tput)
  return self:recv_checkAndPut(table, row, family, qualifier, value, tput)
end

function THBaseServiceClient:send_checkAndPut(table, row, family, qualifier, value, tput)
  self.oprot:writeMessageBegin('checkAndPut', TMessageType.CALL, self._seqid)
  local args = checkAndPut_args:new{}
  args.table = table
  args.row = row
  args.family = family
  args.qualifier = qualifier
  args.value = value
  args.tput = tput
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_checkAndPut(table, row, family, qualifier, value, tput)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = checkAndPut_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:putMultiple(table, tputs)
  self:send_putMultiple(table, tputs)
  self:recv_putMultiple(table, tputs)
end

function THBaseServiceClient:send_putMultiple(table, tputs)
  self.oprot:writeMessageBegin('putMultiple', TMessageType.CALL, self._seqid)
  local args = putMultiple_args:new{}
  args.table = table
  args.tputs = tputs
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_putMultiple(table, tputs)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = putMultiple_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:deleteSingle(table, tdelete)
  self:send_deleteSingle(table, tdelete)
  self:recv_deleteSingle(table, tdelete)
end

function THBaseServiceClient:send_deleteSingle(table, tdelete)
  self.oprot:writeMessageBegin('deleteSingle', TMessageType.CALL, self._seqid)
  local args = deleteSingle_args:new{}
  args.table = table
  args.tdelete = tdelete
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_deleteSingle(table, tdelete)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = deleteSingle_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:deleteMultiple(table, tdeletes)
  self:send_deleteMultiple(table, tdeletes)
  return self:recv_deleteMultiple(table, tdeletes)
end

function THBaseServiceClient:send_deleteMultiple(table, tdeletes)
  self.oprot:writeMessageBegin('deleteMultiple', TMessageType.CALL, self._seqid)
  local args = deleteMultiple_args:new{}
  args.table = table
  args.tdeletes = tdeletes
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_deleteMultiple(table, tdeletes)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = deleteMultiple_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:checkAndDelete(table, row, family, qualifier, value, tdelete)
  self:send_checkAndDelete(table, row, family, qualifier, value, tdelete)
  return self:recv_checkAndDelete(table, row, family, qualifier, value, tdelete)
end

function THBaseServiceClient:send_checkAndDelete(table, row, family, qualifier, value, tdelete)
  self.oprot:writeMessageBegin('checkAndDelete', TMessageType.CALL, self._seqid)
  local args = checkAndDelete_args:new{}
  args.table = table
  args.row = row
  args.family = family
  args.qualifier = qualifier
  args.value = value
  args.tdelete = tdelete
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_checkAndDelete(table, row, family, qualifier, value, tdelete)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = checkAndDelete_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:increment(table, tincrement)
  self:send_increment(table, tincrement)
  return self:recv_increment(table, tincrement)
end

function THBaseServiceClient:send_increment(table, tincrement)
  self.oprot:writeMessageBegin('increment', TMessageType.CALL, self._seqid)
  local args = increment_args:new{}
  args.table = table
  args.tincrement = tincrement
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_increment(table, tincrement)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = increment_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:append(table, tappend)
  self:send_append(table, tappend)
  return self:recv_append(table, tappend)
end

function THBaseServiceClient:send_append(table, tappend)
  self.oprot:writeMessageBegin('append', TMessageType.CALL, self._seqid)
  local args = append_args:new{}
  args.table = table
  args.tappend = tappend
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_append(table, tappend)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = append_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:openScanner(table, tscan)
  self:send_openScanner(table, tscan)
  return self:recv_openScanner(table, tscan)
end

function THBaseServiceClient:send_openScanner(table, tscan)
  self.oprot:writeMessageBegin('openScanner', TMessageType.CALL, self._seqid)
  local args = openScanner_args:new{}
  args.table = table
  args.tscan = tscan
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_openScanner(table, tscan)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = openScanner_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:getScannerRows(scannerId, numRows)
  self:send_getScannerRows(scannerId, numRows)
  return self:recv_getScannerRows(scannerId, numRows)
end

function THBaseServiceClient:send_getScannerRows(scannerId, numRows)
  self.oprot:writeMessageBegin('getScannerRows', TMessageType.CALL, self._seqid)
  local args = getScannerRows_args:new{}
  args.scannerId = scannerId
  args.numRows = numRows
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_getScannerRows(scannerId, numRows)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getScannerRows_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  elseif result.ia then
    error(result.ia)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:closeScanner(scannerId)
  self:send_closeScanner(scannerId)
  self:recv_closeScanner(scannerId)
end

function THBaseServiceClient:send_closeScanner(scannerId)
  self.oprot:writeMessageBegin('closeScanner', TMessageType.CALL, self._seqid)
  local args = closeScanner_args:new{}
  args.scannerId = scannerId
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_closeScanner(scannerId)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = closeScanner_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:mutateRow(table, trowMutations)
  self:send_mutateRow(table, trowMutations)
  self:recv_mutateRow(table, trowMutations)
end

function THBaseServiceClient:send_mutateRow(table, trowMutations)
  self.oprot:writeMessageBegin('mutateRow', TMessageType.CALL, self._seqid)
  local args = mutateRow_args:new{}
  args.table = table
  args.trowMutations = trowMutations
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_mutateRow(table, trowMutations)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = mutateRow_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
end

function THBaseServiceClient:getScannerResults(table, tscan, numRows)
  self:send_getScannerResults(table, tscan, numRows)
  return self:recv_getScannerResults(table, tscan, numRows)
end

function THBaseServiceClient:send_getScannerResults(table, tscan, numRows)
  self.oprot:writeMessageBegin('getScannerResults', TMessageType.CALL, self._seqid)
  local args = getScannerResults_args:new{}
  args.table = table
  args.tscan = tscan
  args.numRows = numRows
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_getScannerResults(table, tscan, numRows)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getScannerResults_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:getRegionLocation(table, row, reload)
  self:send_getRegionLocation(table, row, reload)
  return self:recv_getRegionLocation(table, row, reload)
end

function THBaseServiceClient:send_getRegionLocation(table, row, reload)
  self.oprot:writeMessageBegin('getRegionLocation', TMessageType.CALL, self._seqid)
  local args = getRegionLocation_args:new{}
  args.table = table
  args.row = row
  args.reload = reload
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_getRegionLocation(table, row, reload)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getRegionLocation_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end

function THBaseServiceClient:getAllRegionLocations(table)
  self:send_getAllRegionLocations(table)
  return self:recv_getAllRegionLocations(table)
end

function THBaseServiceClient:send_getAllRegionLocations(table)
  self.oprot:writeMessageBegin('getAllRegionLocations', TMessageType.CALL, self._seqid)
  local args = getAllRegionLocations_args:new{}
  args.table = table
  args:write(self.oprot)
  self.oprot:writeMessageEnd()
  self.oprot.trans:flush()
end

function THBaseServiceClient:recv_getAllRegionLocations(table)
  local fname, mtype, rseqid = self.iprot:readMessageBegin()
  if mtype == TMessageType.EXCEPTION then
    local x = TApplicationException:new{}
    x:read(self.iprot)
    self.iprot:readMessageEnd()
    error(x)
  end
  local result = getAllRegionLocations_result:new{}
  result:read(self.iprot)
  self.iprot:readMessageEnd()
  if result.success then
    return result.success
  elseif result.io then
    error(result.io)
  end
  error(TApplicationException:new{errorCode = TApplicationException.MISSING_RESULT})
end
THBaseServiceIface = __TObject:new{
  __type = 'THBaseServiceIface'
}


THBaseServiceProcessor = __TObject.new(__TProcessor
, {
 __type = 'THBaseServiceProcessor'
})

function THBaseServiceProcessor:process(iprot, oprot, server_ctx)
  local name, mtype, seqid = iprot:readMessageBegin()
  local func_name = 'process_' .. name
  if not self[func_name] or ttype(self[func_name]) ~= 'function' then
    iprot:skip(TType.STRUCT)
    iprot:readMessageEnd()
    x = TApplicationException:new{
      errorCode = TApplicationException.UNKNOWN_METHOD
    }
    oprot:writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
    x:write(oprot)
    oprot:writeMessageEnd()
    oprot.trans:flush()
  else
    self[func_name](self, seqid, iprot, oprot, server_ctx)
  end
end

function THBaseServiceProcessor:process_exists(seqid, iprot, oprot, server_ctx)
  local args = exists_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = exists_result:new{}
  local status, res = pcall(self.handler.exists, self.handler, args.table, args.tget)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('exists', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_get(seqid, iprot, oprot, server_ctx)
  local args = get_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = get_result:new{}
  local status, res = pcall(self.handler.get, self.handler, args.table, args.tget)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('get', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_getMultiple(seqid, iprot, oprot, server_ctx)
  local args = getMultiple_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getMultiple_result:new{}
  local status, res = pcall(self.handler.getMultiple, self.handler, args.table, args.tgets)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getMultiple', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_put(seqid, iprot, oprot, server_ctx)
  local args = put_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = put_result:new{}
  local status, res = pcall(self.handler.put, self.handler, args.table, args.tput)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('put', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_checkAndPut(seqid, iprot, oprot, server_ctx)
  local args = checkAndPut_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = checkAndPut_result:new{}
  local status, res = pcall(self.handler.checkAndPut, self.handler, args.table, args.row, args.family, args.qualifier, args.value, args.tput)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('checkAndPut', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_putMultiple(seqid, iprot, oprot, server_ctx)
  local args = putMultiple_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = putMultiple_result:new{}
  local status, res = pcall(self.handler.putMultiple, self.handler, args.table, args.tputs)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('putMultiple', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_deleteSingle(seqid, iprot, oprot, server_ctx)
  local args = deleteSingle_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = deleteSingle_result:new{}
  local status, res = pcall(self.handler.deleteSingle, self.handler, args.table, args.tdelete)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('deleteSingle', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_deleteMultiple(seqid, iprot, oprot, server_ctx)
  local args = deleteMultiple_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = deleteMultiple_result:new{}
  local status, res = pcall(self.handler.deleteMultiple, self.handler, args.table, args.tdeletes)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('deleteMultiple', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_checkAndDelete(seqid, iprot, oprot, server_ctx)
  local args = checkAndDelete_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = checkAndDelete_result:new{}
  local status, res = pcall(self.handler.checkAndDelete, self.handler, args.table, args.row, args.family, args.qualifier, args.value, args.tdelete)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('checkAndDelete', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_increment(seqid, iprot, oprot, server_ctx)
  local args = increment_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = increment_result:new{}
  local status, res = pcall(self.handler.increment, self.handler, args.table, args.tincrement)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('increment', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_append(seqid, iprot, oprot, server_ctx)
  local args = append_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = append_result:new{}
  local status, res = pcall(self.handler.append, self.handler, args.table, args.tappend)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('append', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_openScanner(seqid, iprot, oprot, server_ctx)
  local args = openScanner_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = openScanner_result:new{}
  local status, res = pcall(self.handler.openScanner, self.handler, args.table, args.tscan)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('openScanner', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_getScannerRows(seqid, iprot, oprot, server_ctx)
  local args = getScannerRows_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getScannerRows_result:new{}
  local status, res = pcall(self.handler.getScannerRows, self.handler, args.scannerId, args.numRows)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  elseif ttype(res) == 'TIllegalArgument' then
    result.ia = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getScannerRows', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_closeScanner(seqid, iprot, oprot, server_ctx)
  local args = closeScanner_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = closeScanner_result:new{}
  local status, res = pcall(self.handler.closeScanner, self.handler, args.scannerId)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  elseif ttype(res) == 'TIllegalArgument' then
    result.ia = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('closeScanner', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_mutateRow(seqid, iprot, oprot, server_ctx)
  local args = mutateRow_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = mutateRow_result:new{}
  local status, res = pcall(self.handler.mutateRow, self.handler, args.table, args.trowMutations)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('mutateRow', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_getScannerResults(seqid, iprot, oprot, server_ctx)
  local args = getScannerResults_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getScannerResults_result:new{}
  local status, res = pcall(self.handler.getScannerResults, self.handler, args.table, args.tscan, args.numRows)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getScannerResults', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_getRegionLocation(seqid, iprot, oprot, server_ctx)
  local args = getRegionLocation_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getRegionLocation_result:new{}
  local status, res = pcall(self.handler.getRegionLocation, self.handler, args.table, args.row, args.reload)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getRegionLocation', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

function THBaseServiceProcessor:process_getAllRegionLocations(seqid, iprot, oprot, server_ctx)
  local args = getAllRegionLocations_args:new{}
  local reply_type = TMessageType.REPLY
  args:read(iprot)
  iprot:readMessageEnd()
  local result = getAllRegionLocations_result:new{}
  local status, res = pcall(self.handler.getAllRegionLocations, self.handler, args.table)
  if not status then
    reply_type = TMessageType.EXCEPTION
    result = TApplicationException:new{message = res}
  elseif ttype(res) == 'TIOError' then
    result.io = res
  else
    result.success = res
  end
  oprot:writeMessageBegin('getAllRegionLocations', reply_type, seqid)
  result:write(oprot)
  oprot:writeMessageEnd()
  oprot.trans:flush()
end

-- HELPER FUNCTIONS AND STRUCTURES

exists_args = __TObject:new{
  table,
  tget
}

function exists_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tget = TGet:new{}
        self.tget:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function exists_args:write(oprot)
  oprot:writeStructBegin('exists_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tget then
    oprot:writeFieldBegin('tget', TType.STRUCT, 2)
    self.tget:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

exists_result = __TObject:new{
  success,
  io
}

function exists_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function exists_result:write(oprot)
  oprot:writeStructBegin('exists_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

get_args = __TObject:new{
  table,
  tget
}

function get_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tget = TGet:new{}
        self.tget:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function get_args:write(oprot)
  oprot:writeStructBegin('get_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tget then
    oprot:writeFieldBegin('tget', TType.STRUCT, 2)
    self.tget:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

get_result = __TObject:new{
  success,
  io
}

function get_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = TResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function get_result:write(oprot)
  oprot:writeStructBegin('get_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMultiple_args = __TObject:new{
  table,
  tgets
}

function getMultiple_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.tgets = {}
        local _etype105, _size102 = iprot:readListBegin()
        for _i=1,_size102 do
          _elem106 = TGet:new{}
          _elem106:read(iprot)
          table.insert(self.tgets, _elem106)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMultiple_args:write(oprot)
  oprot:writeStructBegin('getMultiple_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tgets then
    oprot:writeFieldBegin('tgets', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, string.len(self.tgets))
    for _,iter107 in ipairs(self.tgets) do
      iter107:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getMultiple_result = __TObject:new{
  success,
  io
}

function getMultiple_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype111, _size108 = iprot:readListBegin()
        for _i=1,_size108 do
          _elem112 = TResult:new{}
          _elem112:read(iprot)
          table.insert(self.success, _elem112)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getMultiple_result:write(oprot)
  oprot:writeStructBegin('getMultiple_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, string.len(self.success))
    for _,iter113 in ipairs(self.success) do
      iter113:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

put_args = __TObject:new{
  table,
  tput
}

function put_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tput = TPut:new{}
        self.tput:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function put_args:write(oprot)
  oprot:writeStructBegin('put_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tput then
    oprot:writeFieldBegin('tput', TType.STRUCT, 2)
    self.tput:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

put_result = __TObject:new{
  io
}

function put_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function put_result:write(oprot)
  oprot:writeStructBegin('put_result')
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

checkAndPut_args = __TObject:new{
  table,
  row,
  family,
  qualifier,
  value,
  tput
}

function checkAndPut_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.row = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.family = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.qualifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.tput = TPut:new{}
        self.tput:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkAndPut_args:write(oprot)
  oprot:writeStructBegin('checkAndPut_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.row then
    oprot:writeFieldBegin('row', TType.STRING, 2)
    oprot:writeString(self.row)
    oprot:writeFieldEnd()
  end
  if self.family then
    oprot:writeFieldBegin('family', TType.STRING, 3)
    oprot:writeString(self.family)
    oprot:writeFieldEnd()
  end
  if self.qualifier then
    oprot:writeFieldBegin('qualifier', TType.STRING, 4)
    oprot:writeString(self.qualifier)
    oprot:writeFieldEnd()
  end
  if self.value then
    oprot:writeFieldBegin('value', TType.STRING, 5)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  if self.tput then
    oprot:writeFieldBegin('tput', TType.STRUCT, 6)
    self.tput:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

checkAndPut_result = __TObject:new{
  success,
  io
}

function checkAndPut_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkAndPut_result:write(oprot)
  oprot:writeStructBegin('checkAndPut_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

putMultiple_args = __TObject:new{
  table,
  tputs
}

function putMultiple_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.tputs = {}
        local _etype117, _size114 = iprot:readListBegin()
        for _i=1,_size114 do
          _elem118 = TPut:new{}
          _elem118:read(iprot)
          table.insert(self.tputs, _elem118)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function putMultiple_args:write(oprot)
  oprot:writeStructBegin('putMultiple_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tputs then
    oprot:writeFieldBegin('tputs', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, string.len(self.tputs))
    for _,iter119 in ipairs(self.tputs) do
      iter119:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

putMultiple_result = __TObject:new{
  io
}

function putMultiple_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function putMultiple_result:write(oprot)
  oprot:writeStructBegin('putMultiple_result')
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteSingle_args = __TObject:new{
  table,
  tdelete
}

function deleteSingle_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tdelete = TDelete:new{}
        self.tdelete:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSingle_args:write(oprot)
  oprot:writeStructBegin('deleteSingle_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tdelete then
    oprot:writeFieldBegin('tdelete', TType.STRUCT, 2)
    self.tdelete:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteSingle_result = __TObject:new{
  io
}

function deleteSingle_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteSingle_result:write(oprot)
  oprot:writeStructBegin('deleteSingle_result')
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteMultiple_args = __TObject:new{
  table,
  tdeletes
}

function deleteMultiple_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.LIST then
        self.tdeletes = {}
        local _etype123, _size120 = iprot:readListBegin()
        for _i=1,_size120 do
          _elem124 = TDelete:new{}
          _elem124:read(iprot)
          table.insert(self.tdeletes, _elem124)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteMultiple_args:write(oprot)
  oprot:writeStructBegin('deleteMultiple_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tdeletes then
    oprot:writeFieldBegin('tdeletes', TType.LIST, 2)
    oprot:writeListBegin(TType.STRUCT, string.len(self.tdeletes))
    for _,iter125 in ipairs(self.tdeletes) do
      iter125:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

deleteMultiple_result = __TObject:new{
  success,
  io
}

function deleteMultiple_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype129, _size126 = iprot:readListBegin()
        for _i=1,_size126 do
          _elem130 = TDelete:new{}
          _elem130:read(iprot)
          table.insert(self.success, _elem130)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function deleteMultiple_result:write(oprot)
  oprot:writeStructBegin('deleteMultiple_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, string.len(self.success))
    for _,iter131 in ipairs(self.success) do
      iter131:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

checkAndDelete_args = __TObject:new{
  table,
  row,
  family,
  qualifier,
  value,
  tdelete
}

function checkAndDelete_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.row = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.STRING then
        self.family = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 4 then
      if ftype == TType.STRING then
        self.qualifier = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 5 then
      if ftype == TType.STRING then
        self.value = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 6 then
      if ftype == TType.STRUCT then
        self.tdelete = TDelete:new{}
        self.tdelete:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkAndDelete_args:write(oprot)
  oprot:writeStructBegin('checkAndDelete_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.row then
    oprot:writeFieldBegin('row', TType.STRING, 2)
    oprot:writeString(self.row)
    oprot:writeFieldEnd()
  end
  if self.family then
    oprot:writeFieldBegin('family', TType.STRING, 3)
    oprot:writeString(self.family)
    oprot:writeFieldEnd()
  end
  if self.qualifier then
    oprot:writeFieldBegin('qualifier', TType.STRING, 4)
    oprot:writeString(self.qualifier)
    oprot:writeFieldEnd()
  end
  if self.value then
    oprot:writeFieldBegin('value', TType.STRING, 5)
    oprot:writeString(self.value)
    oprot:writeFieldEnd()
  end
  if self.tdelete then
    oprot:writeFieldBegin('tdelete', TType.STRUCT, 6)
    self.tdelete:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

checkAndDelete_result = __TObject:new{
  success,
  io
}

function checkAndDelete_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.BOOL then
        self.success = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function checkAndDelete_result:write(oprot)
  oprot:writeStructBegin('checkAndDelete_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.BOOL, 0)
    oprot:writeBool(self.success)
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

increment_args = __TObject:new{
  table,
  tincrement
}

function increment_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tincrement = TIncrement:new{}
        self.tincrement:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function increment_args:write(oprot)
  oprot:writeStructBegin('increment_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tincrement then
    oprot:writeFieldBegin('tincrement', TType.STRUCT, 2)
    self.tincrement:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

increment_result = __TObject:new{
  success,
  io
}

function increment_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = TResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function increment_result:write(oprot)
  oprot:writeStructBegin('increment_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

append_args = __TObject:new{
  table,
  tappend
}

function append_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tappend = TAppend:new{}
        self.tappend:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function append_args:write(oprot)
  oprot:writeStructBegin('append_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tappend then
    oprot:writeFieldBegin('tappend', TType.STRUCT, 2)
    self.tappend:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

append_result = __TObject:new{
  success,
  io
}

function append_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = TResult:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function append_result:write(oprot)
  oprot:writeStructBegin('append_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

openScanner_args = __TObject:new{
  table,
  tscan
}

function openScanner_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tscan = TScan:new{}
        self.tscan:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function openScanner_args:write(oprot)
  oprot:writeStructBegin('openScanner_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tscan then
    oprot:writeFieldBegin('tscan', TType.STRUCT, 2)
    self.tscan:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

openScanner_result = __TObject:new{
  success,
  io
}

function openScanner_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.I32 then
        self.success = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function openScanner_result:write(oprot)
  oprot:writeStructBegin('openScanner_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.I32, 0)
    oprot:writeI32(self.success)
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getScannerRows_args = __TObject:new{
  scannerId,
  numRows
}

function getScannerRows_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.scannerId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.I32 then
        self.numRows = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getScannerRows_args:write(oprot)
  oprot:writeStructBegin('getScannerRows_args')
  if self.scannerId then
    oprot:writeFieldBegin('scannerId', TType.I32, 1)
    oprot:writeI32(self.scannerId)
    oprot:writeFieldEnd()
  end
  if self.numRows then
    oprot:writeFieldBegin('numRows', TType.I32, 2)
    oprot:writeI32(self.numRows)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getScannerRows_result = __TObject:new{
  success,
  io,
  ia
}

function getScannerRows_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype135, _size132 = iprot:readListBegin()
        for _i=1,_size132 do
          _elem136 = TResult:new{}
          _elem136:read(iprot)
          table.insert(self.success, _elem136)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.ia = TIllegalArgument:new{}
        self.ia:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getScannerRows_result:write(oprot)
  oprot:writeStructBegin('getScannerRows_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, string.len(self.success))
    for _,iter137 in ipairs(self.success) do
      iter137:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.ia then
    oprot:writeFieldBegin('ia', TType.STRUCT, 2)
    self.ia:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

closeScanner_args = __TObject:new{
  scannerId
}

function closeScanner_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.I32 then
        self.scannerId = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function closeScanner_args:write(oprot)
  oprot:writeStructBegin('closeScanner_args')
  if self.scannerId then
    oprot:writeFieldBegin('scannerId', TType.I32, 1)
    oprot:writeI32(self.scannerId)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

closeScanner_result = __TObject:new{
  io,
  ia
}

function closeScanner_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.ia = TIllegalArgument:new{}
        self.ia:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function closeScanner_result:write(oprot)
  oprot:writeStructBegin('closeScanner_result')
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.ia then
    oprot:writeFieldBegin('ia', TType.STRUCT, 2)
    self.ia:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

mutateRow_args = __TObject:new{
  table,
  trowMutations
}

function mutateRow_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.trowMutations = TRowMutations:new{}
        self.trowMutations:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function mutateRow_args:write(oprot)
  oprot:writeStructBegin('mutateRow_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.trowMutations then
    oprot:writeFieldBegin('trowMutations', TType.STRUCT, 2)
    self.trowMutations:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

mutateRow_result = __TObject:new{
  io
}

function mutateRow_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function mutateRow_result:write(oprot)
  oprot:writeStructBegin('mutateRow_result')
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getScannerResults_args = __TObject:new{
  table,
  tscan,
  numRows
}

function getScannerResults_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRUCT then
        self.tscan = TScan:new{}
        self.tscan:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.I32 then
        self.numRows = iprot:readI32()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getScannerResults_args:write(oprot)
  oprot:writeStructBegin('getScannerResults_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.tscan then
    oprot:writeFieldBegin('tscan', TType.STRUCT, 2)
    self.tscan:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.numRows then
    oprot:writeFieldBegin('numRows', TType.I32, 3)
    oprot:writeI32(self.numRows)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getScannerResults_result = __TObject:new{
  success,
  io
}

function getScannerResults_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype141, _size138 = iprot:readListBegin()
        for _i=1,_size138 do
          _elem142 = TResult:new{}
          _elem142:read(iprot)
          table.insert(self.success, _elem142)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getScannerResults_result:write(oprot)
  oprot:writeStructBegin('getScannerResults_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, string.len(self.success))
    for _,iter143 in ipairs(self.success) do
      iter143:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getRegionLocation_args = __TObject:new{
  table,
  row,
  reload
}

function getRegionLocation_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 2 then
      if ftype == TType.STRING then
        self.row = iprot:readString()
      else
        iprot:skip(ftype)
      end
    elseif fid == 3 then
      if ftype == TType.BOOL then
        self.reload = iprot:readBool()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRegionLocation_args:write(oprot)
  oprot:writeStructBegin('getRegionLocation_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  if self.row then
    oprot:writeFieldBegin('row', TType.STRING, 2)
    oprot:writeString(self.row)
    oprot:writeFieldEnd()
  end
  if self.reload then
    oprot:writeFieldBegin('reload', TType.BOOL, 3)
    oprot:writeBool(self.reload)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getRegionLocation_result = __TObject:new{
  success,
  io
}

function getRegionLocation_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.STRUCT then
        self.success = THRegionLocation:new{}
        self.success:read(iprot)
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getRegionLocation_result:write(oprot)
  oprot:writeStructBegin('getRegionLocation_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.STRUCT, 0)
    self.success:write(oprot)
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllRegionLocations_args = __TObject:new{
  table
}

function getAllRegionLocations_args:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 1 then
      if ftype == TType.STRING then
        self.table = iprot:readString()
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllRegionLocations_args:write(oprot)
  oprot:writeStructBegin('getAllRegionLocations_args')
  if self.table then
    oprot:writeFieldBegin('table', TType.STRING, 1)
    oprot:writeString(self.table)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end

getAllRegionLocations_result = __TObject:new{
  success,
  io
}

function getAllRegionLocations_result:read(iprot)
  iprot:readStructBegin()
  while true do
    local fname, ftype, fid = iprot:readFieldBegin()
    if ftype == TType.STOP then
      break
    elseif fid == 0 then
      if ftype == TType.LIST then
        self.success = {}
        local _etype147, _size144 = iprot:readListBegin()
        for _i=1,_size144 do
          _elem148 = THRegionLocation:new{}
          _elem148:read(iprot)
          table.insert(self.success, _elem148)
        end
        iprot:readListEnd()
      else
        iprot:skip(ftype)
      end
    elseif fid == 1 then
      if ftype == TType.STRUCT then
        self.io = TIOError:new{}
        self.io:read(iprot)
      else
        iprot:skip(ftype)
      end
    else
      iprot:skip(ftype)
    end
    iprot:readFieldEnd()
  end
  iprot:readStructEnd()
end

function getAllRegionLocations_result:write(oprot)
  oprot:writeStructBegin('getAllRegionLocations_result')
  if self.success then
    oprot:writeFieldBegin('success', TType.LIST, 0)
    oprot:writeListBegin(TType.STRUCT, string.len(self.success))
    for _,iter149 in ipairs(self.success) do
      iter149:write(oprot)
    end
    oprot:writeListEnd()
    oprot:writeFieldEnd()
  end
  if self.io then
    oprot:writeFieldBegin('io', TType.STRUCT, 1)
    self.io:write(oprot)
    oprot:writeFieldEnd()
  end
  oprot:writeFieldStop()
  oprot:writeStructEnd()
end
